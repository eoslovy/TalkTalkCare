image: docker:latest

stages:
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  DOCKER_PRIVILEGED: "true"

services:
  - name: docker:dind
    alias: docker
    entrypoint: ["dockerd-entrypoint.sh"]
    command: 
      - "--tls=false"
      - "--host=tcp://0.0.0.0:2375"

before_script:
  - apk add --no-cache docker-compose
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - |
    echo "Configuring docker..."
    until docker info; do
      sleep 1
    done
  - docker network create cicd_network || true

build-backend:
  stage: build
  script:
    - docker-compose -f docker-compose.yml build backend
    - docker-compose -f docker-compose.yml push backend
  rules:
    - changes:
        - backend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

build-frontend:
  stage: build
  script:
    - docker build -t eoslovy/talktalkcare-nginx:latest -f Dockerfile .
    - docker push eoslovy/talktalkcare-nginx:latest
  rules:
    - changes:
        - frontend/**
        - nginx.conf
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

deploy-backend:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - scp .env docker-compose.yml $SSH_USER@$SSH_HOST:~/
    - |
      ssh $SSH_USER@$SSH_HOST "
        echo 'Starting deployment...'
        
        # Docker login
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        
        # Create network
        docker network rm cicd_network || true && \
        docker network create cicd_network || true
        
        # MySQL setup
        if docker ps -a --format '{{.Names}}' | grep -q '^mysql$'; then
          echo 'MySQL container exists'
          docker start mysql
        else
          echo 'Creating MySQL container'
          docker-compose up -d mysql
          echo 'Waiting for MySQL to start'
          sleep 30
        fi

        # Redis setup
        if docker ps -a --format '{{.Names}}' | grep -q '^redis$'; then
          echo 'Redis container exists'
          docker start redis
        else
          echo 'Creating Redis container'
          docker-compose up -d redis
        fi

        # OpenVidu setup
        if docker ps -a --format '{{.Names}}' | grep -q '^openvidu$'; then
          echo 'OpenVidu container exists'
          docker start openvidu
        else
          echo 'Creating OpenVidu container'
          docker-compose up -d openvidu
        fi

        # Backend deployment
        echo 'Cleaning up old backend container'
        docker-compose stop backend || true
        docker-compose rm -f backend || true
        
        echo 'Starting backend container'
        docker-compose up -d backend
        
        echo 'Deployment completed'
      "
  rules:
    - changes:
        - backend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"


deploy-frontend:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - scp docker-compose.yml $SSH_USER@$SSH_HOST:~/
    - ssh $SSH_USER@$SSH_HOST "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD && \
      docker-compose pull nginx && \
      docker-compose up -d nginx"
  rules:
    - changes:
        - frontend/**
        - nginx.conf
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"
