image: docker:latest

stages:
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  MYSQL_ROOT_PASSWORD: "1234"
  MYSQL_DATABASE: "talktalkcare"
  MYSQL_USER: "ssafy"
  MYSQL_PASSWORD: "1234"
  SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/talktalkcare?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true"
  SPRING_DATASOURCE_USERNAME: "ssafy"
  SPRING_DATASOURCE_PASSWORD: "1234"

services:
  - name: docker:dind
    alias: docker
    entrypoint: ["dockerd-entrypoint.sh"]
    command: 
      - "--tls=false"
      - "--host=tcp://0.0.0.0:2375"

before_script:
  - apk add --no-cache docker-compose
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - |
    echo "Configuring docker..."
    until docker info; do
      sleep 1
    done
  - docker network create cicd_network || true

build-backend:
  stage: build
  script:
    - docker-compose -f docker-compose.yml build backend
    - docker-compose -f docker-compose.yml push backend
  rules:
    - changes:
        - backend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

build-frontend:
  stage: build
  script:
    - docker-compose -f docker-compose.yml build frontend
    - docker-compose -f docker-compose.yml push frontend
  rules:
    - changes:
        - frontend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

deploy-backend:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - |
      ssh $SSH_USER@$SSH_HOST "
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD && \
        
        # 기존 네트워크 정리
        docker network rm cicd_network || true && \
        
        # docker-compose 네트워크 사용
        docker network create ubuntu_cicd_network || true && \
        
        # MySQL이 없으면 생성
        if ! docker ps | grep mysql; then
          docker run -d \
            --name mysql \
            --network ubuntu_cicd_network \
            -e MYSQL_ROOT_PASSWORD=1234 \
            -e MYSQL_DATABASE=talktalkcare \
            -e MYSQL_USER=ssafy \
            -e MYSQL_PASSWORD=1234 \
            mysql:8.0
          
          echo 'Waiting for MySQL to start...'
          sleep 30
        fi
        
        # 백엔드 배포
        docker stop backend || true && \
        docker rm backend || true && \
        docker run -d \
          --name backend \
          --network ubuntu_cicd_network \
          -p 8080:8080 \
          -e SPRING_APPLICATION_NAME=talktalkcare \
          -e SPRING_DATASOURCE_URL='jdbc:mysql://mysql:3306/talktalkcare?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true' \
          -e SPRING_DATASOURCE_USERNAME=ssafy \
          -e SPRING_DATASOURCE_PASSWORD=1234 \
          -e SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver \
          -e SPRING_JPA_SHOW_SQL=true \
          -e SPRING_JPA_HIBERNATE_DDL_AUTO=update \
          -e SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true \
          -e SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQL8Dialect \
          -e LOG_LEVEL_SQL=DEBUG \
          -e LOG_LEVEL_TYPE=TRACE \
          eoslovy/talktalkcare-backend:latest
      "
  rules:
    - changes:
        - backend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

deploy-frontend:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - scp docker-compose.yml $SSH_USER@$SSH_HOST:~/
    - |
      ssh $SSH_USER@$SSH_HOST "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD && \
      docker stop frontend || true && \
      docker rm frontend || true && \
      docker-compose pull frontend && \
      docker-compose up -d frontend"
  rules:
    - changes:
        - frontend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"
