image: docker:latest

stages:
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  DOCKER_PRIVILEGED: "true"

services:
  - name: docker:dind
    alias: docker
    entrypoint: ["dockerd-entrypoint.sh"]
    command: 
      - "--tls=false"
      - "--host=tcp://0.0.0.0:2375"

before_script:
  - apk add --no-cache docker-compose
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - |
    echo "Configuring docker..."
    until docker info; do
      sleep 1
    done
  - docker network create cicd_network || true

build-backend:
  stage: build
  script:
    - cd backend
    - docker build -t eoslovy/talktalkcare-backend:latest .
    - docker push eoslovy/talktalkcare-backend:latest
  rules:
    - changes:
        - backend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

build-frontend:
  stage: build
  script:
    - cd frontend
    - docker build -t eoslovy/talktalkcare-nginx:latest .
    - docker push eoslovy/talktalkcare-nginx:latest
  rules:
    - changes:
        - frontend/**
        - nginx.conf
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

deploy-backend:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - scp .env docker-compose.yml $SSH_USER@$SSH_HOST:~/
    - |
      ssh $SSH_USER@$SSH_HOST "
        echo 'Starting backend deployment...'
        
        # Docker 로그인
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

        echo 'Pulling latest image...'
        docker pull eoslovy/talktalkcare-backend:latest
        
        # 순차적으로 컨테이너 정리 (중지 후 삭제)
        echo 'Stopping containers one by one...'
        docker stop -t 10 openvidu || true
        docker stop -t 10 backend || true
        docker stop -t 10 redis || true
        docker stop -t 10 mysql || true
        docker stop -t 10 nginx || true
        
        echo 'Removing containers...'
        docker rm -f openvidu || true
        docker rm -f backend || true
        docker rm -f redis || true
        docker rm -f mysql || true
        docker rm -f nginx || true
        
        # 네트워크 정리 후 재생성
        echo 'Recreating network...'
        docker network rm cicd_network || true
        docker network create cicd_network
        
        # MySQL 실행
        echo 'Deploying MySQL...'
        docker-compose up -d mysql
        echo 'Waiting for MySQL to start...'
        sleep 30  # MySQL 안정화 대기

        # Redis 실행
        echo 'Deploying Redis...'
        docker-compose up -d redis

        # OpenVidu 실행 후 안정화
        echo 'Deploying OpenVidu...'
        docker-compose up -d openvidu
        echo 'Waiting for OpenVidu to stabilize...'
        sleep 60  # OpenVidu 안정화 대기

        # Backend 실행
        echo 'Deploying Backend...'
        docker-compose up -d backend

        echo 'Deployment completed successfully!'
      "
  rules:
    - changes:
        - backend/**
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"

deploy-frontend:
  stage: deploy
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - scp docker-compose.yml frontend/nginx.conf $SSH_USER@$SSH_HOST:~/
    - |
      ssh $SSH_USER@$SSH_HOST "
        echo 'Starting frontend deployment...'

        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

        echo 'Pulling latest image...'
        docker pull eoslovy/talktalkcare-nginx:latest

        echo 'Stopping old Nginx container...'
        docker stop nginx || true
        docker rm -f nginx || true

        echo 'Deploying Nginx...'
        docker-compose up -d nginx

        echo 'Checking deployment status...'
        docker ps | grep nginx

        echo 'Frontend Deployment Completed!'
      "
  rules:
    - changes:
        - frontend/**
        - nginx.conf
    - when: always
  variables:
    DOCKER_PRIVILEGED: "true"